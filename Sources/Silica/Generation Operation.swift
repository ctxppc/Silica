// Silica Â© 2018 Constantino Tsarouhas

import Foundation

/// A task of generating the protocol and its conformances for localisable string types.
final class GenerationOperation : Operation {
	
	/// Creates a task with given source root URL and generated sources URL.
	init(sourcesAt sourcesURL: URL, generatingAt generatedSourcesURL: URL, tableAt tableURL: URL?) {
		self.sourcesURL = sourcesURL
		self.generatedSourcesURL = generatedSourcesURL
		self.tableURL = tableURL
	}
	
	/// The location of the sources. It must be a readable file or directory.
	let sourcesURL: URL
	
	/// The location of the generated sources. It must be a writeable file or directory.
	let generatedSourcesURL: URL
	
	/// The location of the localisation table.
	let tableURL: URL?
	
	override func main() {
		do {
			try run()
		} catch {
			self.error = error
		}
	}
	
	private func run() throws {
		
		let sources = try Module(at: sourcesURL).sources
		let localisableStringTypes = sources.flatMap { LocalisableStringType.types(in: $0) }
		if localisableStringTypes.isEmpty {
			print("warning: Silica did not find any LocalisableString types across \(sources.count) source\(sources.count == 1 ? "" : "s") in \(sourcesURL).")
		}
		
		let commonDomain: String?
		if let tableURL = tableURL {
			
			guard tableURL.pathExtension.caseInsensitiveCompare("strings") == .orderedSame else { throw TableError.unsupportedFormat }
			let table = try LocalisationTable(at: tableURL)
			commonDomain = tableURL.deletingPathExtension().lastPathComponent
			
			for type in localisableStringTypes {
				type.update(table, usingCommonDomain: true)
			}
			
			try table.save()
			
		} else {
			commonDomain = nil
		}
		
		let conformances = localisableStringTypes.map { (name: $0.fullyQualifiedName, body: $0.generatedConformance(commonDomain: commonDomain)) }
		
		if generatedSourcesURL.pathExtension.caseInsensitiveCompare("swift") == .orderedSame {
			try """
				// This file has been generated by Silica. Do not edit this file manually.
				
				import Foundation
				import os
				
				\(localisableStringProtocol)
				
				\(conformances.map { $0.body }.joined(separator: "\n\n"))
				""".write(to: generatedSourcesURL, atomically: false, encoding: .utf8)
		} else {
			
			try """
				// This file has been generated by Silica. Do not edit this file manually.
				
				import Foundation
				import os
				
				\(localisableStringProtocol)
				""".write(to: generatedSourcesURL.appendingPathComponent("Localisable String.swift", isDirectory: false), atomically: false, encoding: .utf8)
			
			for (name, body) in conformances {
				try """
					// This file has been generated by Silica. Do not edit this file manually.
					
					\(body)
					""".write(to: generatedSourcesURL.appendingPathComponent("\(name).silica.swift", isDirectory: false), atomically: false, encoding: .utf8)
			}
			
		}
		
	}
	
	/// An error thrown while performing the operation, or `nil` if the operation hasn't been started or if no error occurred.
	var error: Error?
	
	enum TableError : Error, CustomStringConvertible {
		
		case unsupportedFormat
		
		var description: String {
			switch self {
				case .unsupportedFormat:	return "This localisation table format is not supported by Silica."
			}
		}
		
	}
	
}
