// Silica Â© 2018 Constantino Tsarouhas

import Foundation

/// A task of generating the protocol and its conformances for localisable string types.
final class GenerationOperation : Operation {
	
	/// Creates a task with given source root URL and generated sources URL.
	init(sourcesAt sourcesURL: URL, generatingAt generatedSourcesURL: URL) {
		self.sourcesURL = sourcesURL
		self.generatedSourcesURL = generatedSourcesURL
	}
	
	/// The location of the sources. It must be a readable file or directory.
	let sourcesURL: URL
	
	/// The location of the generated sources. It must be a writeable file or directory.
	let generatedSourcesURL: URL
	
	override func main() {
		do {
			
			let sources = try SourceRoot(at: sourcesURL).sources
			let localisableStringTypes = sources.flatMap { LocalisableStringType.types(in: $0) }
			
			let conformances = localisableStringTypes.map { (name: $0.fullyQualifiedName, body: $0.generatedConformance()) }
			if conformances.isEmpty {
				print("warning: Silica did not find any LocalisableString types across \(sources.count) source\(sources.count == 1 ? "" : "s") in \(sourcesURL).")
			}
			
			if generatedSourcesURL.pathExtension.caseInsensitiveCompare("swift") == .orderedSame {
				try """
					// This file has been generated by Silica. Do not edit this file manually.
					
					import Foundation
					import os
					
					\(localisableStringProtocol)
					
					\(conformances.map { $0.body }.joined(separator: "\n\n"))
					""".write(to: generatedSourcesURL, atomically: false, encoding: .utf8)
			} else {
				
				try """
					// This file has been generated by Silica. Do not edit this file manually.
					
					import Foundation
					import os
					
					\(localisableStringProtocol)
					""".write(to: generatedSourcesURL.appendingPathComponent("Localisable String.swift", isDirectory: false), atomically: false, encoding: .utf8)
				
				for (name, body) in conformances {
					try """
						// This file has been generated by Silica. Do not edit this file manually.
						
						\(body)
						""".write(to: generatedSourcesURL.appendingPathComponent("\(name).silica.swift", isDirectory: false), atomically: false, encoding: .utf8)
				}
				
			}
			
		} catch {
			hasErrors = true
			print("error: could not generate conformances: \(error)")
		}
	}
	
	var hasErrors = false
	
}
